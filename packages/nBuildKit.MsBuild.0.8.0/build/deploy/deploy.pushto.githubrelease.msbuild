<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Deploy_PushTo_GitHubRelease_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPushToGitHubRelease>true</ExistsDeployPushToGitHubRelease>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importdeploysharedsettings.props') AND '$(ExistsSharedImportDeploySharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\GitHubReleaseCreate.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GitHubReleaseCreate.msbuild') AND '$(ExistsExtensionsGitHubReleaseCreate)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\GitHubReleaseUpload.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\GitHubReleaseUpload.msbuild') AND '$(ExistsExtensionsGitHubReleaseUpload)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Deploy_PushTo_GitHubRelease_Run" DependsOnTargets="_nBuildKit_Deploy_PushTo_GitHubRelease_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitHubRelease_GetVersion" />
        <CallTarget Targets="nBuildKit_Shared_TemplateTokens_Initialize" />
        <CallTarget Targets="_nBuildKit_Deploy_PushTo_GitHubRelease_Push" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_DisplayInfo" DependsOnTargets="_nBuildKit_Deploy_PushTo_GitHubRelease_DebugLog">
        <Message Text="Pushing artifacts to the GitHub release ..."
                 Importance="normal"
                 Condition=" '@(PushToGitHubReleaseSpecs)' != '' " />
        <Message Text="No releases defined!"
                 Importance="normal"
                 Condition=" '@(PushToGitHubReleaseSpecs)' == '' " />
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_DebugLog"
            Condition="$(ShouldDisplayDebugLog)" >
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The semantic version file is located at:                           $(FileSemanticVersion)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="GitHub-Release command line executable is located at:              $(ToolsExternalGitHubReleasePath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_GetVersion">
        <GetSemanticVersionFromFile VersionFile="$(FileSemanticVersion)"
                                    Condition="Exists('$(FileSemanticVersion)') AND '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersionFromFile>
    </Target>

    <Target Name="_nBuildKit_Deploy_PushTo_GitHubRelease_Push"
            Condition=" '@(PushToGitHubReleaseSpecs)' != ''"
            Outputs="%(PushToGitHubReleaseSpecs.Identity)">
        <Error Text="No GitHub-Release executable defined. Will not be able to push a release to GitHub."
               Condition=" ('$(ToolsExternalGitHubReleasePath)' == '' OR '$(ToolsExternalGitHubReleasePath)' == 'UNDEFINED') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="No GitHub user name specified. Will not be able to push a release to GitHub."
               Condition=" ('$(GitHubUserName)' == '' OR '$(GitHubUserName)' == 'UNDEFINED' ) AND '$(ShouldExecute)' == 'true' " />

        <!-- Process the build templates in the name -->
        <Message Text="Translating the release name. Currently at: %(PushToGitHubReleaseSpecs.Identity)"
                 Importance="low"/>
        <TemplateText Template="%(PushToGitHubReleaseSpecs.Identity)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.Identity)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseName" />
        </TemplateText>

        <!-- Process the build templates in the included files -->
        <Message Text="Translating the included files. Currently at: %(PushToGitHubReleaseSpecs.IncludedFiles)"
                 Importance="low"/>
        <TemplateText Template="%(PushToGitHubReleaseSpecs.IncludedFiles)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.IncludedFiles)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseIncludedFiles" />
        </TemplateText>

        <!-- Process the build templates in the excluded files -->
        <Message Text="Translating the excluded files. Currently at: %(PushToGitHubReleaseSpecs.ExcludedFiles)"
                 Importance="low"/>
        <TemplateText Template="%(PushToGitHubReleaseSpecs.ExcludedFiles)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.ExcludedFiles)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseExcludedFiles" />
        </TemplateText>

        <!-- Process the build templates in the description -->
        <Message Text="Translating the description. Currently at: %(PushToGitHubReleaseSpecs.Description)"
                 Importance="low"/>
        <TemplateText Template="%(PushToGitHubReleaseSpecs.Description)"
                      Tokens="@(TemplateTokens)"
                      Condition=" '%(PushToGitHubReleaseSpecs.Description)' != '' ">
            <Output TaskParameter="Result" PropertyName="GitHubReleaseDescription" />
        </TemplateText>
        <Error Text="No release description specified. Will not be able to push a release to GitHub."
               Condition=" '$(GitHubReleaseDescription)' == '' AND '$(ShouldExecute)' == 'true' " />

        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="$(GitHubReleaseIncludedFiles.Split(';'))"
            Exclude="$(GitHubReleaseExcludedFiles.Split(';'))">
           <Output
               TaskParameter="Include"
               ItemName="GitHubReleaseFiles"/>
        </CreateItem>

        <CreateProperty Value="%(PushToGitHubReleaseSpecs.Repository)">
            <Output TaskParameter="Value" PropertyName="GitHubReleaseRepository" />
        </CreateProperty>
        <Error Text="No GitHub repository specified. Will not be able to push a release to GitHub."
               Condition=" '$(GitHubReleaseRepository)' == '' AND '$(ShouldExecute)' == 'true' " />

        <!-- Create the release -->
        <Message Text="Creating a release on GitHub with: "
                 Importance="low"/>
        <Message Text="Repository:  $(GitHubUserName)/$(GitHubReleaseRepository)"
                 Importance="low"/>
        <Message Text="Tag:         $(VersionSemantic)"
                 Importance="low"/>
        <Message Text="Name:        $(GitHubReleaseName)"
                 Importance="low"/>
        <Message Text="Description: $(GitHubReleaseDescription)"
                 Importance="low"/>
        <GitHubReleaseCreate GitHubReleasePath="$(ToolsExternalGitHubReleasePath)"
                             LocalPath="$(DirWorkspace)"
                             UserName="$(GitHubUserName)"
                             Repository="$(GitHubReleaseRepository)"
                             Tag="$(VersionSemantic)"
                             ReleaseName="$(GitHubReleaseName)"
                             ReleaseDescription="$(GitHubReleaseDescription)"
                             Condition=" '$(ShouldExecute)' == 'true' "/>

        <!-- Upload the files -->
        <Message Text="Uploading files to release $(GitHubReleaseName) "
                 Importance="low"/>
        <Message Text="%(GitHubReleaseFiles.FullPath)"
                 Importance="low"/>
        <GitHubReleaseUpload GitHubReleasePath="$(ToolsExternalGitHubReleasePath)"
                             LocalPath="$(DirWorkspace)"
                             UserName="$(GitHubUserName)"
                             Repository="$(GitHubReleaseRepository)"
                             Tag="$(VersionSemantic)"
                             FileName="%(GitHubReleaseFiles.Filename)%(GitHubReleaseFiles.Extension)"
                             FilePath="%(GitHubReleaseFiles.FullPath)"
                             Condition=" '@(GitHubReleaseFiles)' != '' AND '$(ShouldExecute)' == 'true' " />
    </Target>
</Project>