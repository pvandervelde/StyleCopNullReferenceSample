<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsFxCopViaProject>true</ExistsExtensionsFxCopViaProject>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <!--
        Invokes FxCopCmd and handles the error cases
        Define:
        - FxCopDir [Property]: The directory that contains FxCopCmd.exe
        - FxCopOutputFile [Property]: The file that should contain the FxCop results
        - FxCopProjectFile [Property]: The FxCop project file
    -->
    <UsingTask TaskName="FxCopViaProject"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <FxCopDir ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
            <ProjectFile ParameterType="System.String" Required="true" />
            <WarningsAsErrors ParameterType="System.Boolean" Required="false" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        var builder = new System.Text.StringBuilder();
                        {
                            builder.Append(string.Format("/project:\"{0}\" ", ProjectFile.TrimEnd('\\')));
                            builder.Append(string.Format("/out:\"{0}\" ", OutputFile.TrimEnd('\\')));
                            builder.Append(string.Format("/ignoregeneratedcode "));
                            builder.Append(string.Format("/searchgac "));
                            builder.Append(string.Format("/forceoutput "));
                            builder.Append(string.Format("/successfile "));
                        }

                        var info = new System.Diagnostics.ProcessStartInfo
                                {
                                    FileName = System.IO.Path.Combine(FxCopDir, "FxCopCmd.exe"),
                                    Arguments = builder.ToString(),
                                    UseShellExecute = false,
                                    RedirectStandardOutput = true,
                                    RedirectStandardError = true,
                                };

                        Log.LogMessage(MessageImportance.Low, info.Arguments);

                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Normal, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        if (process.ExitCode != 0)
                        {
                            if (!WarningsAsErrors)
                            {
                                Log.LogMessage(
                                    MessageImportance.Normal,
                                    string.Format(
                                        "{0} exited with exit code: {1}. Build will continue because errors are assumed to be warnings. To change this set FxCopWarningsAsErrors to 'true' in the settings file.",
                                        System.IO.Path.GetFileName(process.StartInfo.FileName),
                                        process.ExitCode));
                            }
                            else
                            {
                                Log.LogError(
                                    string.Format(
                                        "{0} exited with a non-zero exit code. Exit code was: {1}",
                                        System.IO.Path.GetFileName(process.StartInfo.FileName),
                                        process.ExitCode));
                            }
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>