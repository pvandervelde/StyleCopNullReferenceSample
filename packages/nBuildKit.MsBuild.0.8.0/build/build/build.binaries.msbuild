<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Binaries_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildBinaries>true</ExistsBuildBinaries>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetRestore.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetRestore.msbuild') AND '$(ExistsExtensionsNuGetRestore)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Build_Binaries_Run" DependsOnTargets="_nBuildKit_Build_Binaries_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Build_Binaries_Execute" />
    </Target>

    <Target Name="_nBuildKit_Build_Binaries_DebugLog" Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the build output is located at:           $(DirBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the build logs is located at:             $(DirBuildLogs)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:         $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="NuGet command line executable is located at:                       $(ToolsExternalNuGetPath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Build_Binaries_DisplayInfo"
            DependsOnTargets="_nBuildKit_Build_Binaries_DebugLog">
        <Message Text="Building the Visual Studio solutions ..."
                 Importance="normal"/>
    </Target>

    <Target Name="_nBuildKit_Build_Binaries_Execute"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
            Condition=" '@(SolutionsToBuild)' != '' "
            Outputs="%(SolutionsToBuild.Identity)">
        <TemplateText Template="%(SolutionsToBuild.FullPath)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileSln" />
        </TemplateText>

        <Error Text="No NuGet executable defined. Will not be able to restore the packages."
               Condition=" '$(ToolsExternalNuGetPath)' == '' AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Expected $(FileSln) to point to a valid path but it does not."
               Condition="!Exists('$(FileSln)') AND  '$(ShouldExecute)' == 'true' " />

        <Message Text="Building $(FileSln) for targets = %(SolutionsToBuild.Targets) with: Configuration = %(SolutionsToBuild.Configuration) and Platform = %(SolutionsToBuild.Platform) ..."
                 Importance="normal"/>

        <CreateProperty Value="$([System.IO.Path]::GetExtension('$(FileSln)'))">
            <Output TaskParameter="Value" PropertyName="FileExtension" />
        </CreateProperty>
        <NuGetRestore NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageFile="$(FileSln)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(FileExtension)' == '.sln' AND '$(ShouldExecute)' == 'true' "/>

        <MSBuild
            BuildInParallel="False"
            Projects="$(FileSln)"
            Properties="Configuration=%(SolutionsToBuild.Configuration);Platform=%(SolutionsToBuild.Platform);SharedPropertyFile=$(SharedPropertyFile);BuildPropertyFile=$(BuildPropertyFile);%(SolutionsToBuild.Properties)"
            RebaseOutputs="False"
            RemoveProperties=""
            RunEachTargetSeparately="True"
            SkipNonexistentProjects="False"
            StopOnFirstFailure="False"
            TargetAndPropertyListSeparators=""
            Targets="%(SolutionsToBuild.Targets)"
            ToolsVersion="$(MSBuildToolsVersion)"
            UnloadProjectsOnCompletion="True"
            UseResultsCache="True"
            Condition=" '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="GeneratedAssemblies" />
        </MSBuild>

        <MakeDir Directories="$(DirBuildLogs)"
                 Condition="!Exists('$(DirBuildLogs)') AND '$(ShouldExecute)' == 'true' " />

        <ItemGroup>
            <LogFiles Include="$([System.IO.Path]::GetDirectoryName('%(GeneratedAssemblies.Identity)'))\*.CodeAnalysisLog.xml"
                      Condition="Exists('%(GeneratedAssemblies.Identity)')" />
        </ItemGroup>

        <Move SourceFiles="@(LogFiles)"
              DestinationFolder="$(DirBuildLogs)"
              OverwriteReadOnlyFiles="true"
              ContinueOnError="true"
              Condition=" '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>