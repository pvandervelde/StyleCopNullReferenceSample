<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsGitHubReleaseCreate>true</ExistsExtensionsGitHubReleaseCreate>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="GitHubReleaseCreate"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <GitHubReleasePath ParameterType="System.String" Required="true" />
            <LocalPath ParameterType="System.String" Required="true" />
            <UserName ParameterType="System.String" Required="true" />
            <Repository ParameterType="System.String" Required="true" />
            <Tag ParameterType="System.String" Required="true" />
            <ReleaseName ParameterType="System.String" Required="true" />
            <ReleaseDescription ParameterType="System.String" Required="false" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        var escapedDescription = ReleaseDescription.Replace(@"\", @"\\");
                        escapedDescription = escapedDescription.Replace("\"", "\\\"");

                        var gitHubToken = System.Environment.GetEnvironmentVariable("GitHubToken");
                        var builder = new StringBuilder();
                        {
                            builder.Append(string.Format("release --security-token {0} ", gitHubToken.TrimEnd('\\')));
                            builder.Append(string.Format("--user \"{0}\" ", UserName.TrimEnd('\\')));
                            builder.Append(string.Format("--repo \"{0}\" ", Repository.TrimEnd('\\')));
                            builder.Append(string.Format("--tag \"{0}\" ", Tag.TrimEnd('\\')));
                            builder.Append(string.Format("--name \"{0}\" ", ReleaseName.TrimEnd('\\')));
                            if(!string.IsNullOrEmpty(escapedDescription))
                            {
                                builder.Append(string.Format("--description \"{0}\"", escapedDescription.TrimEnd('\\')));
                            }
                        }

                        Log.LogMessage(MessageImportance.Normal, "Creating release on GitHub");
                        var info = new System.Diagnostics.ProcessStartInfo
                                {
                                    FileName = GitHubReleasePath,
                                    Arguments = builder.ToString(),
                                    WorkingDirectory = LocalPath,
                                    UseShellExecute = false,
                                    RedirectStandardOutput = true,
                                    RedirectStandardError = true,
                                };

                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Normal, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        if (process.ExitCode != 0)
                        {
                            Log.LogError(
                                string.Format(
                                    "{0} exited with a non-zero exit code. Exit code was: {1}",
                                    System.IO.Path.GetFileName(process.StartInfo.FileName),
                                    process.ExitCode));
                            return false;
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>