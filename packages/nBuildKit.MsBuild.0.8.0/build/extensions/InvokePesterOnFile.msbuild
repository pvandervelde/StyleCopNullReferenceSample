<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsInvokePesterOnFile>true</ExistsExtensionsInvokePesterOnFile>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="InvokePesterOnFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <PowershellExePath ParameterType="System.String" Required="true" />
            <PesterModulePath ParameterType="System.String" Required="true" />
            <TestFile ParameterType="System.String" Required="true" />
            <TestArguments ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
            <ReportFile ParameterType="System.String" Required="true" />
            <TempDirectory ParameterType="System.String" Required="true" />
            <IgnoreErrors ParameterType="System.Boolean" Required="true" />
            <IgnoreExitCode ParameterType="System.Boolean" Required="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        try
                        {
                            var arguments = new System.Collections.Generic.Dictionary<string, string>();
                            if (TestArguments != null)
                            {
                                for (int i = 0; i < TestArguments.Length; i++)
                                {
                                    var parameter = TestArguments[i];
                                    var value = parameter.GetMetadata("Value");
                                    // Expecting that the taskItems have:
                                    // - parameter.ItemSpec: Name of the parameter to pass
                                    // - parameter.Value:    Value of the parameter
                                    if (!string.IsNullOrEmpty(parameter.ItemSpec) && !string.IsNullOrEmpty(value))
                                    {
                                        arguments.Add(parameter.ItemSpec, value);
                                    }
                                }
                            }

                            var parameterText = string.Empty;
                            foreach(var pair in arguments)
                            {
                                parameterText += string.Format(
                                    "{0} = \"{1}\";",
                                    pair.Key,
                                    pair.Value);
                            }

                            // Create the script
                            var scriptPath = System.IO.Path.Combine(
                                TempDirectory,
                                string.Format(
                                    "{0}.ps1",
                                    System.Guid.NewGuid().ToString()));
                            using (var writer = new System.IO.StreamWriter(scriptPath, false, System.Text.Encoding.Unicode))
                            {
                                // Stop if anything goes wrong
                                writer.WriteLine("$ErrorActionPreference = 'Stop'");

                                // Add the pester directory to the module path
                                writer.WriteLine(
                                    string.Format(
                                        "$env:PSModulePath = $env:PSModulePath + ';' + '{0}'",
                                        PesterModulePath));

                                // Import pester
                                writer.WriteLine(
                                    string.Format(
                                        "& Import-Module '{0}\\Pester.psm1' ",
                                        PesterModulePath));

                                // Execute pester tests
                                writer.WriteLine(
                                    string.Format(
                                        "$result = Invoke-Pester -Script @{{ Path = '{0}'; Parameters = @{{ {1} }} }} -OutputFormat NUnitXml -OutputFile '{2}' -EnableExit -Verbose",
                                        TestFile,
                                        parameterText,
                                        ReportFile));
                            }

                            var argumentBuilder = new System.Text.StringBuilder();
                            {
                                argumentBuilder.Append("-NonInteractive ");
                                argumentBuilder.Append("-NoProfile ");
                                argumentBuilder.Append("-ExecutionPolicy Bypass ");
                                argumentBuilder.Append(
                                    string.Format(
                                        "-File \"{0}\"",
                                        scriptPath));
                            }

                            var info = new System.Diagnostics.ProcessStartInfo
                                    {
                                        FileName = PowershellExePath,
                                        Arguments = argumentBuilder.ToString(),
                                        UseShellExecute = false,
                                        RedirectStandardOutput = true,
                                        RedirectStandardError = true,
                                    };

                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogMessage(MessageImportance.Normal, e.Data);
                                    }
                                };
                            process.ErrorDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        if (IgnoreErrors)
                                        {
                                            Log.LogWarning(e.Data);
                                        }
                                        else
                                        {
                                            Log.LogError(e.Data);
                                        }
                                    }
                                };

                            Log.LogMessage(
                                MessageImportance.Normal,
                                string.Format(
                                    "Executing pester tests in {0}. Execution script at: {1}",
                                    TestFile,
                                    scriptPath));
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();

                            if (process.ExitCode != 0)
                            {
                                var text = string.Format(
                                    "{0} exited with a non-zero exit code. Exit code was: {1}",
                                    System.IO.Path.GetFileName(process.StartInfo.FileName),
                                    process.ExitCode);
                                if (IgnoreExitCode)
                                {
                                    Log.LogWarning(text);
                                }
                                else
                                {
                                    Log.LogError(text);
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Log.LogError(e.ToString());
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>