<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsReportGeneratorOutputToCsv>true</ExistsExtensionsReportGeneratorOutputToCsv>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="ReportGeneratorOutputToCsv"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <InputFile ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml" />
            <Reference Include="System.Xml.Linq" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var doc = System.Xml.Linq.XDocument.Load(InputFile);
                    var metrics = (from node in doc
                                      .Element("CoverageReport")
                                      .Element("Assemblies")
                                      .Descendants("Assembly")
                                   select new
                                   {
                                       Name = node.Attribute("name").Value,
                                       Coverage = node.Attribute("coverage").Value,
                                   }).ToList();

                    {
                        var builder = new System.Text.StringBuilder();
                        var line = new System.Text.StringBuilder();
                        foreach (var item in metrics)
                        {
                            if (line.Length > 0)
                            {
                                line.Append(",");
                            }

                            line.Append(
                                string.Format(
                                    System.Globalization.CultureInfo.InvariantCulture,
                                    "\"{0}\"",
                                    item.Name.TrimEnd('\\')));
                        }

                        builder.AppendLine(line.ToString());
                        line = new System.Text.StringBuilder();
                        foreach (var item in metrics)
                        {
                            if (line.Length > 0)
                            {
                                line.Append(",");
                            }

                            line.Append(
                                string.Format(
                                    System.Globalization.CultureInfo.InvariantCulture,
                                    "{0}",
                                    item.Coverage));
                        }

                        builder.AppendLine(line.ToString());
                        using (var writer = new System.IO.StreamWriter(OutputFile))
                        {
                            writer.Write(builder.ToString());
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>