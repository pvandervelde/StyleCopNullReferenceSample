<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsTemplateFile>true</ExistsExtensionsTemplateFile>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="TemplateFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <Template ParameterType="System.String" Required="true" />
            <OutputFileName ParameterType="System.String" Required="true" />
            <Tokens ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <SearchExpression ParameterType="System.String" Required="false" />
            <Encoding ParameterType="System.String" Required="false" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        const string MetadataValueTag = "ReplacementValue";

                        if (string.IsNullOrWhiteSpace(SearchExpression))
                        {
                            SearchExpression = "(?<token>\\$\\{(?<identifier>\\w*)\\})";
                        }

                        Log.LogMessage(MessageImportance.Low, "Searching for replacement tokens with the regular expression '{0}'", SearchExpression);

                        var _regex = new System.Text.RegularExpressions.Regex(
                            SearchExpression,
                            System.Text.RegularExpressions.RegexOptions.IgnoreCase
                            | System.Text.RegularExpressions.RegexOptions.Multiline
                            | System.Text.RegularExpressions.RegexOptions.Compiled
                            | System.Text.RegularExpressions.RegexOptions.Singleline);

                        if (!System.IO.File.Exists(Template))
                        {
                            Log.LogError("Template File '{0}' cannot be found", Template);
                        }
                        else
                        {
                            var tokenPairs = new System.Collections.Generic.Dictionary<string, string>(System.StringComparer.InvariantCultureIgnoreCase);
                            if (Tokens != null)
                            {
                                ITaskItem[] processedTokens = Tokens;
                                for (int i = 0; i < processedTokens.Length; i++)
                                {
                                    ITaskItem taskItem = processedTokens[i];
                                    if (!string.IsNullOrEmpty(taskItem.ItemSpec))
                                    {
                                        tokenPairs.Add(taskItem.ItemSpec, taskItem.GetMetadata(MetadataValueTag));
                                    }
                                }
                            }

                            var templateLines = new List<string>();
                            using (var reader = new StreamReader(Template))
                            {
                                string line;
                                while ((line = reader.ReadLine()) != null)
                                {
                                    templateLines.Add(line);
                                }
                            }

                            var outputLines = new List<string>();
                            for (int i = 0; i < templateLines.Count; i++)
                            {
                                var line = templateLines[i];
                                var value = _regex.Replace(
                                    line,
                                    m =>
                                    {
                                        var output = m.Value;
                                        if (tokenPairs.ContainsKey(m.Groups[2].Value))
                                        {
                                            output = tokenPairs[m.Groups[2].Value];
                                        }
                                        return output;
                                    });
                                outputLines.Add(value);
                            }

                            var encoding = System.Text.Encoding.ASCII;
                            if (!string.IsNullOrWhiteSpace(Encoding))
                            {
                                encoding = System.Text.Encoding.GetEncoding(Encoding);
                            }

                            using (var streamWriter = new System.IO.StreamWriter(OutputFileName, false, encoding))
                            {
                                for (int i = 0; i < outputLines.Count; i++)
                                {
                                    streamWriter.WriteLine(outputLines[i]);
                                }

                                streamWriter.Flush();
                                Log.LogMessage(MessageImportance.Low, "Template replaced and written to '{0}'", OutputFileName);
                            }
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>