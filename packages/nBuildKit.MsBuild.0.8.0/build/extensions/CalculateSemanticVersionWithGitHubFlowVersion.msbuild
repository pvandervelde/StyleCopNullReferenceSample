<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsCalculateSemanticVersionWithGitHubFlowVersion>true</ExistsExtensionsCalculateSemanticVersionWithGitHubFlowVersion>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="CalculateSemanticVersionWithGitHubFlowVersion"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <ExePath ParameterType="System.String" Required="true" />
            <TempDir ParameterType="System.String" Required="true" />
            <VersionMajor ParameterType="System.String" Output="true" />
            <VersionMinor ParameterType="System.String" Output="true" />
            <VersionPatch ParameterType="System.String" Output="true" />
            <VersionBuild ParameterType="System.String" Output="true" />
            <VersionPreRelease ParameterType="System.String" Output="true" />
            <VersionSemantic ParameterType="System.String" Output="true" />
            <VersionSemanticFull ParameterType="System.String" Output="true" />
            <VersionSemanticNuGet ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        var versionFile = Path.Combine(TempDir, "githubflowversion.json");
                        var info = new System.Diagnostics.ProcessStartInfo
                        {
                            FileName = ExePath,
                            Arguments = string.Format("/ToFile \"{0}\"", versionFile),
                            UseShellExecute = false,
                            RedirectStandardOutput = true,
                            RedirectStandardError = true,
                        };

                        Log.LogMessage(MessageImportance.Low, ExePath);
                        Log.LogMessage(MessageImportance.Low, info.Arguments);

                        var text = new System.Text.StringBuilder();
                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Normal, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        if (process.ExitCode != 0)
                        {
                            Log.LogError(
                                string.Format(
                                    "{0} exited with a non-zero exit code. Exit code was: {1}",
                                    System.IO.Path.GetFileName(process.StartInfo.FileName),
                                    process.ExitCode));
                            Log.LogError(string.Format("Output was: {0}", text));

                            return false;
                        }

                        try
                        {
                            string fileText;
                            using (var reader = new System.IO.StreamReader(versionFile))
                            {
                                fileText = reader.ReadToEnd();
                            }

                            const string fullSemVersionStart = "\"GitHubFlowVersion_FullSemVer\": \"";
                            var index = fileText.IndexOf(fullSemVersionStart);
                            VersionSemanticFull = fileText.Substring(
                                index + fullSemVersionStart.Length,
                                fileText.IndexOf("\"", index + fullSemVersionStart.Length) - (index + fullSemVersionStart.Length));

                            const string semVersionStart = "\"GitHubFlowVersion_SemVer\": \"";
                            index = fileText.IndexOf(semVersionStart);
                            VersionSemantic = fileText.Substring(
                                index + semVersionStart.Length,
                                fileText.IndexOf("\"", index + semVersionStart.Length) - (index + semVersionStart.Length));

                            const string majorVersionStart = "\"GitHubFlowVersion_Major\": \"";
                            index = fileText.IndexOf(majorVersionStart);
                            VersionMajor = fileText.Substring(
                                index + majorVersionStart.Length,
                                fileText.IndexOf("\"", index + majorVersionStart.Length) - (index + majorVersionStart.Length));

                            const string minorVersionStart = "\"GitHubFlowVersion_Minor\": \"";
                            index = fileText.IndexOf(minorVersionStart);
                            VersionMinor = fileText.Substring(
                                index + minorVersionStart.Length,
                                fileText.IndexOf("\"", index + minorVersionStart.Length) - (index + minorVersionStart.Length));

                            const string patchVersionStart = "\"GitHubFlowVersion_Patch\": \"";
                            index = fileText.IndexOf(patchVersionStart);
                            VersionPatch = fileText.Substring(
                                index + patchVersionStart.Length,
                                fileText.IndexOf("\"", index + patchVersionStart.Length) - (index + patchVersionStart.Length));

                            const string buildVersionStart = "\"GitHubFlowVersion_NumCommitsSinceRelease\": \"";
                            index = fileText.IndexOf(buildVersionStart);
                            VersionBuild = fileText.Substring(
                                index + buildVersionStart.Length,
                                fileText.IndexOf("\"", index + buildVersionStart.Length) - (index + buildVersionStart.Length));

                            const string tagVersionStart = "\"GitHubFlowVersion_Tag\": \"";
                            index = fileText.IndexOf(tagVersionStart);
                            VersionPreRelease = fileText.Substring(
                                index + tagVersionStart.Length,
                                fileText.IndexOf("\"", index + tagVersionStart.Length) - (index + tagVersionStart.Length));

                            VersionSemanticNuGet = VersionSemantic;
                            if (!string.IsNullOrWhiteSpace(VersionPreRelease))
                            {
                                VersionSemanticNuGet = string.Format(
                                    "{0}-{1}{2}",
                                    VersionSemantic,
                                    VersionPreRelease,
                                    VersionBuild);
                            }
                        }
                        catch(Exception e)
                        {
                            Log.LogError(e.ToString());
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>