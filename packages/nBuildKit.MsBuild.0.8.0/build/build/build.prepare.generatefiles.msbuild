<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Prepare_GenerateFiles_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildPrepareGenerateFiles>true</ExistsBuildPrepareGenerateFiles>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateFile.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateFile.msbuild') AND '$(ExistsExtensionsTemplateFile)' != 'true' " />

    <Target Name="nBuildKit_Build_Prepare_GenerateFiles_Run"
            DependsOnTargets="_nBuildKit_Build_Prepare_GenerateFiles_DisplayInfo"
            Outputs="%(BuildFilesToGenerate.Identity)"
            Condition=" '@(BuildFilesToGenerate)' != '' ">
        <CallTarget Targets="_nBuildKit_Build_Prepare_GenerateFiles_GenerateFiles" />
    </Target>

    <Target Name="_nBuildKit_Build_Prepare_GenerateFiles_DebugLog"
            Condition="$(ShouldDisplayDebugLog)">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                       $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:        $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:      $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:    $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The semantic version file is located at:                           $(FileSemanticVersion)"
                 Importance="low"/>
        <Message Text="The VCS info file is located at:                                   $(FileVcsInfo)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Build_Prepare_GenerateFiles_DisplayInfo"
            DependsOnTargets="_nBuildKit_Build_Prepare_GenerateFiles_DebugLog">
        <Message Text="Generating files ..."
                 Importance="normal"/>
    </Target>

    <!-- Generate the required files -->
    <Target Name="_nBuildKit_Build_Prepare_GenerateFiles_GenerateFiles"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize"
            Outputs="%(BuildFilesToGenerate.Identity)"
            Condition=" '@(BuildFilesToGenerate)' != '' ">
        <Message Text="Generating file %(BuildFilesToGenerate.Identity)"
                 Importance="normal"/>

        <!--
            MsBuild can't seem to handle using item metadata (BuildFilesToGenerate.FullPath) inside a property function
            inside the Exists() function, so we'll split the process and do the transfer separately.
        -->
        <ItemGroup>
            <DirBuildFilesToGenerateTemp Include="$([System.IO.Path]::GetDirectoryName('%(BuildFilesToGenerate.FullPath)'))" />
        </ItemGroup>

        <MakeDir Directories="%(DirBuildFilesToGenerateTemp.Identity)"
                 Condition="!Exists('%(DirBuildFilesToGenerateTemp.Identity)')" />

        <!--
            It seems MsBuild can't handle batched metadata in conditions either, so make a property and then use that.
        -->
        <CreateProperty Value="%(BuildFilesToGenerate.Token)">
            <Output TaskParameter="Value" PropertyName="AdditionalToken" />
        </CreateProperty>
        <ItemGroup Condition=" '$(AdditionalToken)' != '' ">
            <TemplateTokens Include="%(BuildFilesToGenerate.Token)">
                <ReplacementValue>%(BuildFilesToGenerate.ReplacementValue)</ReplacementValue>
            </TemplateTokens>
        </ItemGroup>

        <TemplateFile Template="%(BuildFilesToGenerate.Template)"
                      OutputFileName="%(BuildFilesToGenerate.Identity)"
                      Tokens="@(TemplateTokens)"
                      Encoding="%(BuildFilesToGenerate.Encoding)"
                      Condition="!Exists('%(BuildFilesToGenerate.FullPath)')"/>
    </Target>
 </Project>