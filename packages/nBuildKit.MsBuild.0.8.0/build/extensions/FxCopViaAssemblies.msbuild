<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsFxCopViaAssemblies>true</ExistsExtensionsFxCopViaAssemblies>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>

        <MsBuildUtilitiesAssembly>$(MSBuildToolsPath)\Microsoft.Build.Utilities.v$(MSBuildToolsVersion).dll</MsBuildUtilitiesAssembly>
        <MsBuildUtilitiesAssembly Condition="!Exists('$(MsBuildUtilitiesAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Utilities.Core.dll</MsBuildUtilitiesAssembly>
    </PropertyGroup>

    <!--
        Invokes FxCopCmd and handles the error cases
        Define:
        - FxCopDir [Property]: The directory that contains FxCopCmd.exe
        - FxCopOutputFile [Property]: The file that should contain the FxCop results
        - FxCopProjectFile [Property]: The FxCop project file
    -->
    <UsingTask TaskName="FxCopViaAssemblies"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <FxCopDir ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" Required="true" />
            <RuleSet ParameterType="System.String" Required="true" />
            <RuleSetDirectory ParameterType="System.String" Required="true" />
            <Assemblies ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <ReferenceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
            <ReferenceDirectories ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
            <Dictionary ParameterType="System.String" Required="false" />
            <Culture ParameterType="System.String" Required="false" />
            <WarningsAsErrors ParameterType="System.Boolean" Required="false" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Framework.dll"/>
            <Reference Include="$(MsBuildUtilitiesAssembly)"/>
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.IO;
                    using System.Linq;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public sealed class FxCopViaAssemblies : Microsoft.Build.Utilities.Task
                    {
                        [Microsoft.Build.Framework.Required]
                        public string FxCopDir
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string OutputFile
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string RuleSet
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string RuleSetDirectory
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public Microsoft.Build.Framework.ITaskItem[] Assemblies
                        {
                            get;
                            set;
                        }

                        public Microsoft.Build.Framework.ITaskItem[] ReferenceFiles
                        {
                            get;
                            set;
                        }

                        public Microsoft.Build.Framework.ITaskItem[] ReferenceDirectories
                        {
                            get;
                            set;
                        }

                        public string Dictionary
                        {
                            get;
                            set;
                        }

                        public string Culture
                        {
                            get;
                            set;
                        }

                        public bool WarningsAsErrors
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            if (Assemblies != null)
                            {
                                var assemblyPaths = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>();

                                for (int i = 0; i < Assemblies.Length; i++)
                                {
                                    var taskItem = Assemblies[i];
                                    // Expecting that the taskItems have:
                                    // - taskItem.ItemSpec: Name of the assembly to include in the attribute
                                    // - taskItem.TargetFramework:    Name of the group the assemblies belong to
                                    if (!string.IsNullOrEmpty(taskItem.ItemSpec))
                                    {
                                        var path = Path.GetFullPath(taskItem.ItemSpec);
                                        var targetFramework = taskItem.GetMetadata("TargetFramework");
                                        if (string.IsNullOrEmpty(targetFramework))
                                        {
                                            continue;
                                        }

                                        if (!assemblyPaths.ContainsKey(targetFramework))
                                        {
                                            assemblyPaths.Add(targetFramework, new System.Collections.Generic.List<string>());
                                        }

                                        var list = assemblyPaths[targetFramework];
                                        if (!list.Contains(path))
                                        {
                                            list.Add(path);
                                        }
                                    }
                                }

                                foreach(var map in assemblyPaths)
                                {
                                    Log.LogMessage(MessageImportance.Normal, string.Format("Analyzing assemblies with target framework [{0}] with FxCop", map.Key));
                                    InvokeFxCop(map.Key, map.Value);
                                }
                            }

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }

                        private void InvokeFxCop(string targetFramework, System.Collections.Generic.IEnumerable<string> assemblyPaths)
                        {
                            var builder = new System.Text.StringBuilder();
                            {
                                var outputFilePath = Path.Combine(
                                    Path.GetDirectoryName(OutputFile),
                                    string.Format(
                                        "{0}_{1}{2}",
                                        Path.GetFileNameWithoutExtension(OutputFile),
                                        targetFramework.Replace(" ", "").Replace(".", ""),
                                        Path.GetExtension(OutputFile)));

                                builder.Append(string.Format("/ruleset:=\"{0}\" ", RuleSet.TrimEnd('\\')));
                                builder.Append(string.Format("/rulesetdirectory:\"{0}\" ", RuleSetDirectory.TrimEnd('\\')));
                                builder.Append(string.Format("/out:\"{0}\" ", outputFilePath));
                                builder.Append(string.Format("/ignoregeneratedcode "));
                                builder.Append(string.Format("/searchgac "));
                                builder.Append(string.Format("/forceoutput "));
                                builder.Append(string.Format("/successfile "));
                                builder.Append(string.Format("/targetframeworkversion:v{0} ", targetFramework));

                                if (!string.IsNullOrEmpty(Dictionary))
                                {
                                    builder.Append(string.Format("/dictionary:\"{0}\" ", Dictionary.TrimEnd('\\')));
                                }

                                if (!string.IsNullOrEmpty(Culture))
                                {
                                    builder.Append(string.Format("/culture:\"{0}\" ", Culture.TrimEnd('\\')));
                                }

                                if (ReferenceFiles != null)
                                {
                                    foreach (var referenceFileName in ReferenceFiles)
                                    {
                                        builder.Append(string.Format("/reference:\"{0}\" ", referenceFileName.ItemSpec.TrimEnd('\\')));
                                    }
                                }

                                if (ReferenceDirectories != null)
                                {
                                    foreach (var referenceDirectory in ReferenceDirectories)
                                    {
                                        builder.Append(string.Format("/directory:\"{0}\" ", referenceDirectory.ItemSpec.TrimEnd('\\')));
                                    }
                                }

                                foreach (var inputFileName in assemblyPaths)
                                {
                                    builder.Append(string.Format("/file:\"{0}\" ", inputFileName.TrimEnd('\\')));
                                }
                            }

                            var info = new System.Diagnostics.ProcessStartInfo
                                    {
                                        FileName = System.IO.Path.Combine(FxCopDir, "FxCopCmd.exe"),
                                        Arguments = builder.ToString(),
                                        UseShellExecute = false,
                                        RedirectStandardOutput = true,
                                        RedirectStandardError = true,
                                    };

                            Log.LogMessage(MessageImportance.Low, info.Arguments);

                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogMessage(MessageImportance.Normal, e.Data);
                                    }
                                };
                            process.ErrorDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogError(e.Data);
                                    }
                                };
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();

                            if (process.ExitCode != 0)
                            {
                                if (!WarningsAsErrors)
                                {
                                    Log.LogMessage(
                                        MessageImportance.Normal,
                                        string.Format(
                                            "{0} exited with exit code: {1}. Build will continue because errors are assumed to be warnings. To change this set FxCopWarningsAsErrors to 'true' in the settings file.",
                                            System.IO.Path.GetFileName(process.StartInfo.FileName),
                                            process.ExitCode));
                                }
                                else
                                {
                                    Log.LogError(
                                        string.Format(
                                            "{0} exited with a non-zero exit code. Exit code was: {1}",
                                            System.IO.Path.GetFileName(process.StartInfo.FileName),
                                            process.ExitCode));
                                }
                            }
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>