<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Test_Unit_NUnit_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildTestUnitNUnit>true</ExistsBuildTestUnitNUnit>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild') AND '$(ExistsExtensionsNuGetInstall)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\OpenCover.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\OpenCover.msbuild') AND '$(ExistsExtensionsOpenCover)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\ReportGenerator.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\ReportGenerator.msbuild') AND '$(ExistsExtensionsReportGenerator)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild') AND '$(ExistsExtensionsReportGeneratorOutputToCsv)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolPath)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SortFilesByDirectory.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SortFilesByDirectory.msbuild') AND '$(ExistsExtensionsSortFilesByDirectory)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Build_Test_Unit_NUnit_Run"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_NUnit_GetToolPaths" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_NUnit_PrepareWorkspace" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_NUnit_SortFilesByDirectory" />
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_NUnit_Execute" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_DisplayInfo"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_DebugLog">
        <Message Text="Running unit tests with NUnit ..."
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_DebugLog"
            Condition="$(ShouldDisplayDebugLog)"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                                     $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the OpenCover unit test coverage reports is located at: $(DirReportGeneratorOutput)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:                       $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:                      $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:                    $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:                  $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The OpenCover XML report will be located at:                                     $(FileReportOpenCoverXmlExpanded)"
                 Importance="low"/>
        <Message Text="The OpenCover CSV report will be located at:                                     $(FileReportOpenCoverCsvExpanded)"
                 Importance="low"/>
        <Message Text="The ReportGenerator XML summary report will be located at:                       $(FileReportReportGeneratorXmlSummary)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="nUnit command line executable is located at:                                     $(ToolsExternalNUnitConsolePath)"
                 Importance="low"/>
        <Message Text="OpenCover command line executable is located at:                                 $(ToolsExternalOpenCoverPath)"
                 Importance="low"/>
        <Message Text="ReportGenerator command line executable is located at:                           $(ToolsExternalReportGeneratorPath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_GetToolPaths">
        <Error Text="The packages directory does not exist. Cannot search for the unit test executables."
               Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "/>

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="NUnit.Runners"
                      PackageVersion="$(ToolsExternalNUnitConsoleVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalNUnitConsolePath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="nunit-console.exe"
                                            Condition=" '$(ToolsExternalNUnitConsolePath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalNUnitConsolePath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The NUnit executable was found at: $(ToolsExternalNUnitConsolePath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalNUnitConsolePath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the NUnit executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalNUnitConsolePath)') AND '$(ShouldExecute)' == 'true' "/>

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="OpenCover"
                      PackageVersion="$(ToolsExternalOpenCoverVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalOpenCoverPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="opencover.console.exe"
                                            Condition=" '$(ToolsExternalOpenCoverPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalOpenCoverPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The OpenCover executable was found at: $(ToolsExternalOpenCoverPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalOpenCoverPath)') AND '$(ShouldExecute)' == 'true' " />
        <Error Text="Could not locate the OpenCover executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalOpenCoverPath)') AND '$(ShouldExecute)' == 'true' "/>

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="ReportGenerator"
                      PackageVersion="$(ToolsExternalReportGeneratorVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="ReportGenerator.exe"
                                            Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND  '$(ShouldExecute)' == 'true' ">
            <Output TaskParameter="Path" PropertyName="ToolsExternalReportGeneratorPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The ReportGenerator executable was found at: $(ToolsExternalReportGeneratorPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' " />
        <Warning Text="Could not locate the ReportGenerator executable path. Cannot generate the unit test coverage reports."
                 Condition="!Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize">
        <Message Text="Resolving build templates ..."
                 Importance="low"/>

        <TemplateText Template="$(FileReportOpenCoverXml)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverXmlExpanded" />
        </TemplateText>

        <TemplateText Template="$(FileReportOpenCoverCsv)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverCsvExpanded" />
        </TemplateText>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_PrepareWorkspace"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates">
        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReportOpenCoverXmlExpanded)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)" Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <CreateProperty Value="$([System.IO.Path]::GetDirectoryName('$(FileReportOpenCoverCsvExpanded)'))">
            <Output TaskParameter="Value" PropertyName="DirToCreate" />
        </CreateProperty>
        <MakeDir Directories="$(DirToCreate)" Condition="!Exists('$(DirToCreate)') AND '$(ShouldExecute)' == 'true' " />

        <!-- This directory is always present although users may change the location -->
        <MakeDir Directories="$(DirReportGeneratorOutput)"
                 Condition="!Exists('$(DirReportGeneratorOutput)') AND '$(ShouldExecute)' == 'true' " />
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_SortFilesByDirectory">
        <SortFilesByDirectory Files="@(UnitTestAssemblies)" >
            <Output TaskParameter="Directories" ItemName="UnitTestDirectories" />
        </SortFilesByDirectory>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_RunTests"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_GetToolPaths;_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates;_nBuildKit_Build_Test_Unit_NUnit_PrepareWorkspace;_nBuildKit_Build_Test_Unit_NUnit_SortFilesByDirectory"
            Outputs="%(UnitTestDirectories.Identity)">
        <!--
            Create the ItemGroup dynamically because creating an ItemGroup in the target with the dynamically
            created properties doesn't work because the wildcards are not always expanded for some reason.
        -->
        <CreateItem
            Include="%(UnitTestDirectories.Files)">
           <Output
               TaskParameter="Include"
               ItemName="UnitTestAssembliesForDirectory"/>
        </CreateItem>
        <CreateProperty Value="@(UnitTestAssembliesForDirectory->'%22%(FullPath)%22', ' ')">
            <Output TaskParameter="Value" PropertyName="AssembliesToTest" />
        </CreateProperty>

        <Message Text="Executing unit tests for: " />
        <Message Text="--- %(UnitTestAssembliesForDirectory.FullPath)" />
        <OpenCover OpenCoverExe="$(ToolsExternalOpenCoverPath)"
                   OpenCoverOutput="$([System.IO.Path]::GetDirectoryName('$(FileReportOpenCoverXmlExpanded)'))\$([System.IO.Path]::GetFileNameWithoutExtension('$(FileReportOpenCoverXmlExpanded)'))-%(UnitTestDirectories.Index)$([System.IO.Path]::GetExtension('$(FileReportOpenCoverXmlExpanded)'))"
                   OpenCoverFilters="@(OpenCoverFilters->'%(Identity)', ' ')"
                   OpenCoverExcludeAttributes="@(OpenCoverIgnoreAttributes)"
                   UnitTestExe="$(ToolsExternalNUnitConsolePath)"
                   UnitTestArguments="/framework:net-$(TargetFrameworkVersion.TrimStart('v')) /result:&quot;nunit-console-%(UnitTestDirectories.Index).xml&quot; /work:&quot;$(DirBuildLogs)&quot; /noshadow /domain:multiple $(AssembliesToTest)"
                   BinDir="%(UnitTestDirectories.FullPath)"
                   Condition=" Exists('$(ToolsExternalOpenCoverPath)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>

    <PropertyGroup>
        <FileReportReportGeneratorXmlSummary>$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary>
    </PropertyGroup>
    <Target Name="_nBuildKit_Build_Test_Unit_NUnit_Execute"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_NUnit_ReplaceBuildTemplates;_nBuildKit_Build_Test_Unit_NUnit_RunTests">
        <ItemGroup>
            <FilesReportOpenCoverXml Include="$([System.IO.Path]::GetDirectoryName('$(FileReportOpenCoverXmlExpanded)'))\$([System.IO.Path]::GetFileNameWithoutExtension('$(FileReportOpenCoverXmlExpanded)'))-*$([System.IO.Path]::GetExtension('$(FileReportOpenCoverXmlExpanded)'))" />
        </ItemGroup>

        <ReportGenerator ReportGeneratorExe="$(ToolsExternalReportGeneratorPath)"
                         OpenCoverOutputFiles="@(FilesReportOpenCoverXml)"
                         OutputDir="$(DirReportGeneratorOutput)"
                         Condition="Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>

        <ReportGeneratorOutputToCsv InputFile="$(FileReportReportGeneratorXmlSummary)"
                                    OutputFile="$(FileReportOpenCoverCsvExpanded)"
                                    Condition="Exists('$(FileReportReportGeneratorXmlSummary)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>