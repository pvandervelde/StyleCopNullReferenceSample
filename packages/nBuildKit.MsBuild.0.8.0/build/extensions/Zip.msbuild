<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project ToolsVersion="4.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsZip>true</ExistsExtensionsZip>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>

        <MsBuildUtilitiesAssembly>$(MSBuildToolsPath)\Microsoft.Build.Utilities.v$(MSBuildToolsVersion).dll</MsBuildUtilitiesAssembly>
        <MsBuildUtilitiesAssembly Condition="!Exists('$(MsBuildUtilitiesAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Utilities.Core.dll</MsBuildUtilitiesAssembly>
    </PropertyGroup>

    <UsingTask TaskName="Zip"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <File ParameterType="System.String" Required="true" />
            <OutputDirectory ParameterType="System.String" Required="true" />
            <OverwriteExistingFiles ParameterType="System.Boolean" Required="false" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.IO.Compression" />
            <Reference Include="System.Xml" />
            <Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Framework.dll"/>
            <Reference Include="$(MsBuildUtilitiesAssembly)"/>
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using System.IO;
                    using System.IO.Compression;
                    using System.Xml;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public sealed class Zip : Microsoft.Build.Utilities.Task
                    {
                        public bool OverwriteExistingFiles
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string File
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string OutputDirectory
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            if (File == null)
                            {
                                Log.LogError("No archive files to create!");
                                return false;
                            }

                            var xmlDoc = new XmlDocument();
                            xmlDoc.Load(File);
                            var name = xmlDoc.SelectSingleNode("//archive/name/text()").InnerText;
                            var outputFilePath = Path.Combine(OutputDirectory, string.Format("{0}.zip", name));

                            var files = new Dictionary<string, List<string>>();
                            var filesNode = xmlDoc.SelectSingleNode("//archive/files");
                            foreach (XmlNode child in filesNode.ChildNodes)
                            {
                                var excludedFiles = new List<string>();
                                var excludedAttribute = child.Attributes["exclude"];
                                var excluded = (excludedAttribute != null ? excludedAttribute.Value : string.Empty).Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                foreach (var exclude in excluded)
                                {
                                    var pathSections = exclude.Split(new[] { "**" }, StringSplitOptions.RemoveEmptyEntries);

                                    var directory = pathSections.Length == 1 ? Path.GetDirectoryName(pathSections[0]) : pathSections[0].Trim('\\');
                                    var fileFilter = pathSections.Length == 1 ? Path.GetFileName(pathSections[0]) : pathSections[pathSections.Length - 1].Trim('\\');
                                    var recurse = pathSections.Length > 1;
                                    var filesToExclude = GetFilteredFilePaths(directory, fileFilter, recurse).Select(f => f.FullName);
                                    excludedFiles.AddRange(filesToExclude);
                                }

                                var targetAttribute = child.Attributes["target"];
                                var target = targetAttribute != null ? targetAttribute.Value : string.Empty;

                                var sourceAttribute = child.Attributes["src"];
                                var sources = sourceAttribute.Value.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                                foreach (var source in sources)
                                {
                                    var pathSections = source.Split(new[] { "**" }, StringSplitOptions.RemoveEmptyEntries);

                                    var directory = pathSections.Length == 1 ? Path.GetDirectoryName(pathSections[0]) : pathSections[0].Trim('\\');
                                    var fileFilter = pathSections.Length == 1 ? Path.GetFileName(pathSections[0]) : pathSections[pathSections.Length - 1].Trim('\\');
                                    var recurse = pathSections.Length > 1;
                                    var filesToInclude = GetFilteredFilePaths(directory, fileFilter, recurse)
                                        .Where(f => !excludedFiles.Contains(f.FullName))
                                        .Select(f => f.FullName);

                                    foreach(var file in filesToInclude)
                                    {
                                        var relativePath = Path.Combine(target, GetRelativePath(file, directory));
                                        if (!files.ContainsKey(file))
                                        {
                                            files.Add(file, new List<string>());
                                        }

                                        var list = files[file];
                                        list.Add(relativePath);
                                    }
                                }
                            }

                            Log.LogMessage(MessageImportance.Normal, string.Format("Creating archive at: {0}", outputFilePath));
                            Compress(outputFilePath, files, OverwriteExistingFiles);

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }

                        private IEnumerable<FileInfo> GetFilteredFilePaths(string baseDirectory, string fileFilter, bool recurse)
                        {
                            var dirInfo = new System.IO.DirectoryInfo(baseDirectory);
                            return dirInfo.EnumerateFiles(fileFilter, recurse ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly);
                        }

                        private string GetRelativePath(string file, string baseDirectory)
                        {
                            return !string.IsNullOrEmpty(baseDirectory)
                                ? file.Substring(baseDirectory.Length).TrimStart(Path.DirectorySeparatorChar)
                                : Path.GetFileName(file);
                        }

                        private void Compress(
                            string outputFile,
                            System.Collections.Generic.IDictionary<string, List<string>> files,
                            bool overwriteExistingFile)
                        {
                            const int BufferSize = 64 * 1024;

                            var buffer = new byte[BufferSize];
                            var fileMode = overwriteExistingFile ? FileMode.Create : FileMode.CreateNew;

                            using (var outputFileStream = new FileStream(outputFile, fileMode))
                            {
                                using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
                                {
                                    foreach (var pair in files)
                                    {
                                        var filePath = pair.Key;
                                        var list = pair.Value;

                                        using (var fs = new FileStream(filePath, FileMode.Open))
                                        {
                                            foreach(var relativePath in list)
                                            {
                                                Log.LogMessage(MessageImportance.Low, string.Format("Adding: {0}. Storing as: {1}", filePath, relativePath));
                                                var archiveEntry = archive.CreateEntry(relativePath);

                                                using (var zipStream = archiveEntry.Open())
                                                {
                                                    int bytesRead = -1;
                                                    while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                                                    {
                                                        zipStream.Write(buffer, 0, bytesRead);
                                                    }
                                                }

                                                fs.Position = 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>