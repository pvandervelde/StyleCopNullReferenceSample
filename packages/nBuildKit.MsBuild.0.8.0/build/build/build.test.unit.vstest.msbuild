<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="nBuildKit_Build_Test_Unit_VsTest_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsBuildTestUnitMsTest>true</ExistsBuildTestUnitMsTest>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props"
            Condition="Exists('$(DirNBuildKitMsBuildShared)\shared.importbuildsharedsettings.props') AND '$(ExistsSharedImportBuildSharedSettings)' != 'true' " />

    <PropertyGroup>
        <FileRunSettings>$(DirBuildTemp)\vstest.runsettings</FileRunSettings>
    </PropertyGroup>

    <Import Project="$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuild)\shared.templatetokens.msbuild') AND '$(ExistsSharedTemplateTokens)' != 'true' " />

    <Import Project="$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\NuGetInstall.msbuild') AND '$(ExistsExtensionsNuGetInstall)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\ReportGenerator.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\ReportGenerator.msbuild') AND '$(ExistsExtensionsReportGenerator)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\ReportGeneratorOutputToCsv.msbuild') AND '$(ExistsExtensionsReportGeneratorOutputToCsv)' != 'true' "/>
    <Import Project="$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\SearchPackagesDirectoryForToolPath.msbuild') AND '$(ExistsExtensionsSearchPackagesDirectoryForToolPath)' != 'true' " />
    <Import Project="$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild"
            Condition="Exists('$(DirNBuildKitMsBuildExtensions)\TemplateText.msbuild') AND '$(ExistsExtensionsTemplateText)' != 'true' " />

    <Target Name="nBuildKit_Build_Test_Unit_VsTest_Run"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_DisplayInfo">
        <CallTarget Targets="_nBuildKit_Build_Test_Unit_VsTest_Execute" />
    </Target>

    <!-- Display info -->
    <Target Name="_nBuildKit_Build_Test_Unit_VsTest_DisplayInfo"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_DebugLog">
        <Message Text="Running unit tests with VsTest ..." />
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_VsTest_DebugLog"
            Condition="$(ShouldDisplayDebugLog)"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates">
        <Message Text="Project directory structure:"
                 Importance="low"/>
        <Message Text="The workspace is located at:                                                     $(DirWorkspace)"
                 Importance="low"/>
        <Message Text="The directory containing the OpenCover unit test coverage reports is located at: $(DirReportGeneratorOutput)"
                 Importance="low"/>
        <Message Text="The directory containing the NuGet packages is located at:                       $(DirPackages)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit files is located at:                      $(DirNBuildKitMsBuild)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit scripts is located at:                    $(DirNBuildKitMsBuildExtensions)"
                 Importance="low"/>
        <Message Text="The directory containing the nBuildKit templates is located at:                  $(DirNBuildKitMsBuildTemplates)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The VsTest report will be located at:                                            $(DirReportVsTestExpanded)"
                 Importance="low"/>
        <Message Text="The OpenCover XML report will be located at:                                     $(FileReportOpenCoverXmlExpanded)"
                 Importance="low"/>
        <Message Text="The OpenCover CSV report will be located at:                                     $(FileReportOpenCoverCsvExpanded)"
                 Importance="low"/>
        <Message Text="The ReportGenerator XML summary report will be located at:                       $(FileReportReportGeneratorXmlSummary)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>

        <Message Text="The VsTest command line executable is located at:                                $(ToolsExternalVsTestPath)"
                 Importance="low"/>
        <Message Text="ReportGenerator command line executable is located at:                           $(ToolsExternalReportGeneratorPath)"
                 Importance="low"/>
        <Message Text=" "
                 Importance="low"/>
    </Target>

    <Target Name="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates"
            DependsOnTargets="nBuildKit_Shared_TemplateTokens_Initialize">
        <Message Text="Resolving build templates ..."
                 Importance="low"/>

        <TemplateText Template="$(DirReportVsTest)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="DirReportVsTestExpanded" />
        </TemplateText>

        <TemplateText Template="$(FileReportOpenCoverXml)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverXmlExpanded" />
        </TemplateText>

        <TemplateText Template="$(FileReportOpenCoverCsv)"
                      Tokens="@(TemplateTokens)">
            <Output TaskParameter="Result" PropertyName="FileReportOpenCoverCsvExpanded" />
        </TemplateText>
    </Target>

    <PropertyGroup>
        <FileReportReportGeneratorXmlSummary>$(DirReportGeneratorOutput)\Summary.xml</FileReportReportGeneratorXmlSummary>
    </PropertyGroup>
    <Target Name="_nBuildKit_Build_Test_Unit_VsTest_Execute"
            DependsOnTargets="_nBuildKit_Build_Test_Unit_VsTest_ReplaceBuildTemplates">
        <Error Text="The packages directory does not exist. Cannot search for the unit test executables."
               Condition="!Exists('$(DirPackages)') AND '$(ShouldExecute)' == 'true' "/>
        <Error Text="Could not locate the VsTest executable path. Cannot execute unit tests."
               Condition="!Exists('$(ToolsExternalVsTestPath)') AND '$(ShouldExecute)' == 'true' "/>

        <MakeDir Directories="$(DirReportVsTestExpanded)"
                 Condition="!Exists('$(DirReportVsTestExpanded)') AND '$(ShouldExecute)' == 'true' " />

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="nBuildKit.Tools.VsCoverageToReportGenerator"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalVSCoverageToReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="VSCoverageToReportGenerator.exe"
                                            Condition=" '$(ToolsExternalVSCoverageToReportGeneratorPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' ">
          <Output TaskParameter="Path" PropertyName="ToolsExternalVSCoverageToReportGeneratorPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The VSCoverageToReportGenerator executable was found at: $(ToolsExternalVSCoverageToReportGeneratorPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' " />
        <Warning Text="Could not locate the VSCoverageToReportGenerator executable path. Cannot convert the code coverage reports."
                 Condition="!Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>

        <NuGetInstall NuGetPath="$(ToolsExternalNuGetPath)"
                      PackageName="ReportGenerator"
                      PackageVersion="$(ToolsExternalReportGeneratorVersion)"
                      PackageDirectory="$(DirPackages)"
                      Sources="@(NuGetSources)"
                      Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND   '$(ShouldExecute)' == 'true' "/>
        <SearchPackagesDirectoryForToolPath PackagesDir="$(DirPackages)"
                                            FileToLocate="ReportGenerator.exe"
                                            Condition=" '$(ToolsExternalReportGeneratorPath)' == 'UNDEFINED' AND '$(ShouldExecute)' == 'true' ">
          <Output TaskParameter="Path" PropertyName="ToolsExternalReportGeneratorPath" />
        </SearchPackagesDirectoryForToolPath>
        <Message Text="The ReportGenerator executable was found at: $(ToolsExternalReportGeneratorPath)"
                 Importance="low"
                 Condition="Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' " />
        <Warning Text="Could not locate the ReportGenerator executable path. Cannot generate the unit test coverage reports."
                 Condition="!Exists('$(ToolsExternalReportGeneratorPath)') AND '$(ShouldExecute)' == 'true' "/>

        <!-- Create the run settings file for vstest -->
        <ItemGroup>
            <RunSettingsContent Include="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;" />
            <RunSettingsContent Include="&lt;RunSettings&gt;" />

            <RunSettingsContent Include="&lt;RunConfiguration&gt;" />
            <!-- Note that this needs to be on 1 line because otherwise vstest chokes on it for some reason. -->
            <RunSettingsContent Include="&lt;ResultsDirectory&gt;$(DirReportVsTestExpanded)&lt;/ResultsDirectory&gt;" />
            <RunSettingsContent Include="&lt;/RunConfiguration&gt;" />

            <RunSettingsContent Include="&lt;/RunSettings&gt;" />
        </ItemGroup>
        <WriteLinesToFile
            File="$(FileRunSettings)"
            Lines="@(RunSettingsContent)"
            Overwrite="true" />

        <!-- Add integration with TFS if the current build is being executed from TFS -->
        <CreateProperty Value="/logger:TfsPublisher&#59;Collection=$(TeamFoundationServerUrl)&#59;TeamProject=$(TF_PROJECT_NAME)&#59;BuildName=$(TF_BUILD_BUILDNUMBER)&#59;Flavor=$(Configuration)&#59;Platform=$(Platform)"
                        Condition=" '$(TF_BUILD)' == 'True' ">
            <Output TaskParameter="Value" PropertyName="VsTestAdditionalParams" />
        </CreateProperty>

        <Message Text="Executing unit tests for: " />
        <Message Text="--- %(UnitTestAssemblies.FullPath)" />
        <Exec
            Command="&quot;$(ToolsExternalVsTestPath)&quot; @(UnitTestAssemblies->'%22%(FullPath)%22', ' ') /EnableCodeCoverage /InIsolation /Platform:x86 /settings:&quot;$(FileRunSettings)&quot; /logger:trx $(VsTestAdditionalParams)"
            IgnoreExitCode="False"
            IgnoreStandardErrorWarningFormat="False">
        </Exec>

        <ItemGroup>
            <CoverageFilesToConvert Include="$(DirReportVsTestExpanded)\**\*.coverage" />
        </ItemGroup>

        <!--
            Get the directory paths that contain the binaries used to run the unit tests with. Note that these paths cannot have a trailing backslash because on the command line the backslash escapes the quote and then we
            get a path that ends in a quote.

            Because MsBuild does not allow combining property functions and metadata expansions this isn't going to be pretty ....
        -->
        <ItemGroup>
            <UnitTestAssemblyDirectoriesWithTrailingBackslash Include="@(UnitTestAssemblies->'%(RootDir)%(Directory)')" />
        </ItemGroup>
        <RemoveDuplicates Inputs="@(UnitTestAssemblyDirectoriesWithTrailingBackslash)">
            <Output TaskParameter="Filtered" ItemName="UnitTestAssemblyDirectoriesWithTrailingBackslashFiltered" />
        </RemoveDuplicates>
        <ItemGroup>
            <UnitTestAssemblyDirectoriesUnique Include="$([System.String]::new('%(UnitTestAssemblyDirectoriesWithTrailingBackslashFiltered.Identity)').Replace('\&#59;', '&#59;').Trim('\'))" />
        </ItemGroup>
        <CreateProperty Value="@(UnitTestAssemblyDirectoriesUnique-> '--BinDirectory=&quot;%(FullPath)&quot;', ' ')">
            <Output TaskParameter="Value" PropertyName="CoverageBinDirectories" />
        </CreateProperty>
        <Message Text="Directories for unit test assemblies after removing duplicates" />
        <Message Text="$(CoverageBinDirectories)" />

        <Exec Command="&quot;$(ToolsExternalVSCoverageToReportGeneratorPath)&quot; --InputFile=&quot;@(CoverageFilesToConvert)&quot; --OutputFile=&quot;%(RootDir)%(Directory)\%(FileName).xml&quot; --VisualStudioDirectory=&quot;$(ToolsExternalVisualStudioDir)&quot; $(CoverageBinDirectories)"
              IgnoreExitCode="False"
              IgnoreStandardErrorWarningFormat="False"
              Condition=" Exists('$(ToolsExternalVSCoverageToReportGeneratorPath)') AND '@(CoverageFilesToConvert)' != '' AND '$(ShouldExecute)' == 'true' "/>

        <ItemGroup>
            <ReportFilesToProcess Include="$(DirReportVsTestExpanded)\**\*.xml" />
        </ItemGroup>

        <ReportGenerator ReportGeneratorExe="$(ToolsExternalReportGeneratorPath)"
                         OpenCoverOutputFiles="@(ReportFilesToProcess)"
                         OutputDir="$(DirReportGeneratorOutput)"
                         Condition=" Exists('$(ToolsExternalReportGeneratorPath)') AND '@(ReportFilesToProcess)' != '' AND '$(ShouldExecute)' == 'true' "/>

        <ReportGeneratorOutputToCsv InputFile="$(FileReportReportGeneratorXmlSummary)"
                                    OutputFile="$(FileReportOpenCoverCsvExpanded)"
                                    Condition="Exists('$(FileReportReportGeneratorXmlSummary)') AND Exists('$(FileReportReportGeneratorXmlSummary)') AND '$(ShouldExecute)' == 'true' "/>
    </Target>
 </Project>