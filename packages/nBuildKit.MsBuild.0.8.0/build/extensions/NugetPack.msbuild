<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsNuGetPack>true</ExistsExtensionsNuGetPack>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="NuGetPack"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <NuGetPath ParameterType="System.String" Required="true" />
            <File ParameterType="System.String" Required="true" />
            <ShouldBuildSymbols ParameterType="System.Boolean" Required="true" />
            <OutputDirectory ParameterType="System.String" Required="true" />
            <Properties ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        const string MetadataValueTag = "ReplacementValue";
                        var propertyText = string.Empty;
                        if (Properties != null)
                        {
                            var properties = new System.Collections.Generic.List<string>();

                            ITaskItem[] processedProperties = Properties;
                            for (int i = 0; i < processedProperties.Length; i++)
                            {
                                ITaskItem taskItem = processedProperties[i];
                                if (!string.IsNullOrEmpty(taskItem.ItemSpec))
                                {
                                    var metadataItem = taskItem.GetMetadata(MetadataValueTag);
                                    properties.Add(string.Format("{0}=\"{1}\"", taskItem.ItemSpec, metadataItem.TrimEnd('\\')));
                                }
                            }

                            propertyText = string.Join(";", properties);
                        }

                        var builder = new System.Text.StringBuilder();
                        {
                            builder.Append(string.Format("pack \"{0}\" ", File.TrimEnd('\\')));
                            if (ShouldBuildSymbols)
                            {
                                builder.Append("-Symbols ");
                            }

                            // Make sure we remove the back-slash because if we don't then
                            // the closing quote will be eaten by the command line parser. Note that
                            // this is only necessary because we're dealing with a directory
                            builder.Append(string.Format("-OutputDirectory \"{0}\" ", OutputDirectory.TrimEnd('\\')));

                            if (!string.IsNullOrEmpty(propertyText))
                            {
                                builder.Append(string.Format("-Properties {0} ", propertyText));
                            }
                        }

                        var info = new System.Diagnostics.ProcessStartInfo
                                {
                                    FileName = NuGetPath,
                                    Arguments = builder.ToString(),
                                    UseShellExecute = false,
                                    RedirectStandardOutput = true,
                                    RedirectStandardError = true,
                                };

                        Log.LogMessage(MessageImportance.Low, string.Format("{0} {1}", info.FileName, info.Arguments));

                        var process = new System.Diagnostics.Process();
                        process.StartInfo = info;
                        process.OutputDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogMessage(MessageImportance.Normal, e.Data);
                                }
                            };
                        process.ErrorDataReceived +=
                            (s, e) =>
                            {
                                if (!string.IsNullOrWhiteSpace(e.Data))
                                {
                                    Log.LogError(e.Data);
                                }
                            };
                        process.Start();

                        process.BeginOutputReadLine();
                        process.BeginErrorReadLine();
                        process.WaitForExit();

                        if (process.ExitCode != 0)
                        {
                            Log.LogError(
                                string.Format(
                                    "{0} exited with a non-zero exit code. Exit code was: {1}",
                                    System.IO.Path.GetFileName(process.StartInfo.FileName),
                                    process.ExitCode));
                            return false;
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>