<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsUpdateAttributeInCode>true</ExistsExtensionsUpdateAttributeInCode>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>

    <UsingTask TaskName="UpdateAttributeInCode"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <InputFile ParameterType="System.String" Required="true" />
            <AttributeName ParameterType="System.String" Required="true" />
            <Value ParameterType="System.String" Required="true" />
            <Encoding ParameterType="System.String" Required="false" />
        </ParameterGroup>
        <Task>
            <Code Type="Method" Language="cs">
                <![CDATA[
                    public override bool Execute()
                    {
                        if (!System.IO.File.Exists(InputFile))
                        {
                            Log.LogError("Input File '{0}' cannot be found", InputFile);
                        }
                        else
                        {
                            var ext = System.IO.Path.GetExtension(InputFile).TrimStart('.');

                            var attribute = string.Empty;
                            var assemblyAttributeMatcher = "UNDEFINED";
                            switch (ext)
                            {
                                case "cs":
                                    attribute = string.Format("[assembly: {0}({1})]", AttributeName, Value);
                                    assemblyAttributeMatcher = string.Format("(^\\s*\\[assembly:\\s*{0})(.*$)", AttributeName);
                                    break;
                                case "vb":
                                    attribute = string.Format("<Assembly: {0}({1})>", AttributeName, Value);
                                    assemblyAttributeMatcher = string.Format("(^\\s*<Assembly:\\s*{0})(.*$)", AttributeName);
                                    break;
                            }

                            var lines = new List<string>();
                            using (var reader = new StreamReader(InputFile))
                            {
                                string line;
                                while ((line = reader.ReadLine()) != null)
                                {
                                    lines.Add(line);
                                }
                            }

                            var found = false;
                            for (int i = 0; i < lines.Count; i++)
                            {
                                var text = lines[i];

                                if (System.Text.RegularExpressions.Regex.IsMatch(text, assemblyAttributeMatcher))
                                {
                                    Log.LogMessage(MessageImportance.Low, string.Format("Replacing in file: {0}. Old line \"{1}\". New line: \"{2}\"", InputFile, lines[i], attribute));
                                    lines[i] = attribute;

                                    found = true;
                                    break;
                                }
                            }

                            if (found)
                            {
                                var encoding = System.Text.Encoding.ASCII;
                                if (!string.IsNullOrWhiteSpace(Encoding))
                                {
                                    encoding = System.Text.Encoding.GetEncoding(Encoding);
                                }

                                using (var writer = new StreamWriter(InputFile, false, encoding))
                                {
                                    for (int i = 0; i < lines.Count; i++)
                                    {
                                        writer.WriteLine(lines[i]);
                                    }
                                }
                            }
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>