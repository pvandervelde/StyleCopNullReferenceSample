<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nuclei</name>
    </assembly>
    <members>
        <member name="T:Nuclei.AssemblyExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Reflection.Assembly"/> objects.
            </summary>
        </member>
        <member name="M:Nuclei.AssemblyExtensions.IsStrongNamed(System.Reflection.Assembly)">
            <summary>
            Returns a value indicating whether the assembly is strong named.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
                <see langword="true" /> if the assembly is strong named; otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="assembly"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Nuclei.AssemblyExtensions.LocalDirectoryPath(System.Reflection.Assembly)">
            <summary>
            Returns the local directory path from where a specific <see cref="T:System.Reflection.Assembly"/>
            was loaded.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            The local directory path from where the assembly was loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="assembly"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Nuclei.AssemblyExtensions.LocalFilePath(System.Reflection.Assembly)">
            <summary>
            Returns the local file path from where a specific <see cref="T:System.Reflection.Assembly"/>
            was loaded.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            The local file path from where the assembly was loaded.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="assembly"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:Nuclei.AssemblyExtensions.StrongName(System.Reflection.Assembly)">
            <summary>
            Gets the strong name of the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The strong name of the assembly.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="assembly"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:Nuclei.EmbeddedResourceExtracter">
            <summary>
            Defines utility methods for dealing with resources stored in the assembly.
            </summary>
        </member>
        <member name="M:Nuclei.EmbeddedResourceExtracter.LoadEmbeddedStream(System.Reflection.Assembly,System.String)">
            <summary>
            Extracts an embedded stream out of a given assembly.
            </summary>
            <param name="assembly">The assembly in which the embedded resource can be found.</param>
            <param name="filePath">The name of the file to extract.</param>
            <returns>A stream containing the file data.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="filePath"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="filePath"/> is an empty string.
            </exception>
            <exception cref="T:Nuclei.TemplateLoadException">
            Thrown if the embedded text file either could not be loaded or was empty.
            </exception>
        </member>
        <member name="M:Nuclei.EmbeddedResourceExtracter.LoadEmbeddedTextFile(System.Reflection.Assembly,System.String)">
            <summary>
            Extracts an embedded file out of a given assembly.
            </summary>
            <param name="assembly">The assembly in which the embedded resource can be found.</param>
            <param name="filePath">The name of the file to extract.</param>
            <returns>A string containing the file data.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assembly"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="filePath"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <paramref name="filePath"/> is an empty string.
            </exception>
            <exception cref="T:Nuclei.TemplateLoadException">
            Thrown if the embedded text file either could not be loaded or was empty.
            </exception>
        </member>
        <member name="T:Nuclei.Id`2">
            <summary>
            Defines the base class for ID numbers.
            </summary>
            <remarks>
            <para>
            Derivative classes should define the type parameters as:
            </para>
            <example>
            public sealed class SomeId : Id&lt;SomeId, SomeValueType&gt;
            </example>
            </remarks>
            <typeparam name="TId">The type of the id.</typeparam>
            <typeparam name="TInternalValue">The type of object that is stored internally as the ID number.</typeparam>
        </member>
        <member name="M:Nuclei.Id`2.op_Equality(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nuclei.Id`2.op_Inequality(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nuclei.Id`2.op_GreaterThan(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nuclei.Id`2.op_GreaterThanOrEqual(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nuclei.Id`2.op_LessThan(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Nuclei.Id`2.op_LessThanOrEqual(Nuclei.Id{`0,`1},Nuclei.Id{`0,`1})">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="first">The first object.</param>
            <param name="second">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:Nuclei.Id`2._value">
            <summary>
            The internal value which defines the value for the current ID.
            </summary>
        </member>
        <member name="M:Nuclei.Id`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.Id`2"/> class.
            </summary>
            <param name="value">The value.</param>
            <design>
            There is no way to check that the value is actually usable. This all
            depends on the type of the internal value. Unfortunately only the
            derivative class knows that. But using a virtual method in a constructor
            is not advisable. And so we can't call into the derivative class for
            checking.
            </design>
        </member>
        <member name="P:Nuclei.Id`2.InternalValue">
            <summary>
            Gets the internal value in a readonly fashion.
            </summary>
            <value>The internal value.</value>
        </member>
        <member name="M:Nuclei.Id`2.Clone">
            <summary>
            Clones this ID number.
            </summary>
            <returns>
            A copy of the current ID number.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.Clone(`1)">
            <summary>
            Performs the actual act of creating a copy of the current ID number.
            </summary>
            <param name="value">The internally stored value.</param>
            <returns>
            A copy of the current ID number.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.CompareTo(`0)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that
            indicates whether the current instance precedes, follows, or occurs in the same position in the
            sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="other"/>.
            Zero
            This instance is equal to <paramref name="other"/>.
            Greater than zero
            This instance is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.CompareValues(`1,`1)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that
            indicates whether the current instance precedes, follows, or occurs in the same position in the
            sort order as the other object.
            </summary>
            <param name="ourValue">The value of the current object.</param>
            <param name="theirValue">The value of the object with which the current object is being compared.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            Value
            Meaning
            Less than zero
            <paramref name="ourValue"/> is less than <paramref name="theirValue"/>.
            Zero
            <paramref name="ourValue"/> is equal to <paramref name="theirValue"/>.
            Greater than zero
            <paramref name="ourValue"/> is greater than <paramref name="theirValue"/>.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that
            indicates whether the current instance precedes, follows, or occurs in the same position in the
            sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="M:Nuclei.Id`2.Equals(`0)">
            <summary>
            Determines whether the specified <see cref="T:Nuclei.Id`2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Nuclei.Id`2"/> to compare with this instance.</param>
            <returns>
                <see langword="true"/> if the specified <see cref="T:Nuclei.Id`2"/> is equal to this instance;
                otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.AreValuesEqual(`1,`1)">
            <summary>
            Determines whether the specified values to see if they are equal.
            </summary>
            <param name="ourValue">The value owned by the current ID.</param>
            <param name="theirValue">The value owned by the other ID.</param>
            <returns>
                <see langword="true"/> if <paramref name="theirValue"/> is equal to the value owned by this instance;
                otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
                <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Nuclei.Id`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Nuclei.IIsId`1">
            <summary>
            Defines the base interface for ID numbers.
            </summary>
            <remarks>
            <para>
            Derivative classes should define the type parameters as:
            </para>
            <example>
            public sealed class SomeId : IIsId&lt;SomeId&gt;
            </example>
            </remarks>
            <typeparam name="TId">The type of the object which is the ID.</typeparam>
        </member>
        <member name="M:Nuclei.IIsId`1.Clone">
            <summary>
            Clones this ID number.
            </summary>
            <returns>
            A copy of the current ID number.
            </returns>
        </member>
        <member name="T:Nuclei.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_ArgumentOutOfRange_WithArgument">
            <summary>
              Looks up a localized string similar to The argument value was outside the valid range. The argument value was: {0}.
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_CouldNotLoadTemplate">
            <summary>
              Looks up a localized string similar to Could not load template..
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_ErrorCode_CompareArgument">
            <summary>
              Looks up a localized string similar to Cannot compare these two objects, their types do not match [this: {0}; other: {1}].
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_ParameterShouldNotBeAnEmptyString">
            <summary>
              Looks up a localized string similar to The parameter should not be an empty string..
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_UnableToLoadType">
            <summary>
              Looks up a localized string similar to An offline type could not be loaded..
            </summary>
        </member>
        <member name="P:Nuclei.Properties.Resources.Exceptions_Messages_UnableToLoadType_WithTypeName">
            <summary>
              Looks up a localized string similar to A type of {0} could not be loaded..
            </summary>
        </member>
        <member name="T:Nuclei.ReflectionExtensions">
            <summary>
            Defines helper and extension methods for reflection of types and methods.
            </summary>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.MemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the name of the member which is called inside the expression.
            </summary>
            <param name="expression">The expression that is used to call the member for which the name must be determined.</param>
            <example>
            <code>
            var result = MemberName(() => x.Bar())
            </code>
            </example>
            <returns>
            The name of the member in the expression or <see langword="null"/> if no member was called in the expression.
            </returns>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.MemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Returns the name of the member which is called inside the expression.
            </summary>
            <example>
            <code>
            var result = MemberName(x => x.Bar())
            </code>
            </example>
            <typeparam name="T">The type on which the member is called.</typeparam>
            <param name="expression">The expression that is used to call the member for which the name must be determined.</param>
            <returns>
            The name of the member in the expression or <see langword="null"/> if no member was called in the expression.
            </returns>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.MemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the name of the member which is called inside the expression.
            </summary>
            <example>
            <code>
            var result = MemberName(x => x.Bar())
            </code>
            </example>
            <typeparam name="T">The type on which the member is called.</typeparam>
            <typeparam name="TResult">The result of the member call.</typeparam>
            <param name="expression">The expression that is used to call the member for which the name must be determined.</param>
            <returns>
            The name of the member in the expression or <see langword="null"/> if no member was called in the expression.
            </returns>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.MethodInfoToString(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Builds a comma separated string containing all the method names and parameters for each of the method information
            objects in the collection.
            </summary>
            <param name="methods">The collection containing the method information.</param>
            <returns>A string containing all the method signatures.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="methods"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.PropertyInfoToString(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Builds a comma separated string containing all the property signatures of the property information in the collection.
            </summary>
            <param name="properties">The collection containing the property information.</param>
            <returns>A string containing the property information.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="properties"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.EventInfoToString(System.Collections.Generic.IEnumerable{System.Reflection.EventInfo})">
            <summary>
            Builds a comma separated string containing the event signatures of all the events in the
            collection.
            </summary>
            <param name="events">The collection containing the events.</param>
            <returns>A string containing the event signatures.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="events"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.IsSame(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Returns a value indicating if the given assembly name is an exact match for the current assembly name.
            </summary>
            <param name="current">The current assembly name.</param>
            <param name="other">The assembly name that should be compared to the current assembly name.</param>
            <returns>
            <see langword="true" /> if the given assembly name is an exact match for the current assembly name;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Nuclei.ReflectionExtensions.IsMatch(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Returns a value indicating if the current assembly name belongs to the same assembly as the assembly with the other name, or
            a later version of that assembly.
            </summary>
            <param name="current">The current assembly name.</param>
            <param name="other">The assembly name that should be compared to the current assembly name.</param>
            <returns>
            <see langword="true" /> if the current assembly name belongs to the same assembly as the assembly with the other name, or
            a later version of that assembly; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Nuclei.TemplateLoadException">
            <summary>
            An exception thrown when there is a failure to read a template file from the assembly.
            </summary>
        </member>
        <member name="M:Nuclei.TemplateLoadException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.TemplateLoadException"/> class.
            </summary>
        </member>
        <member name="M:Nuclei.TemplateLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.TemplateLoadException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nuclei.TemplateLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.TemplateLoadException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nuclei.TemplateLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.TemplateLoadException"/> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
                object data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Nuclei.TypeComparer">
            <summary>
            Defines a method for comparing <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Nuclei.TypeComparer.Compare(System.Type,System.Type)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition
            Less than zero x is less than y.
            Zero x equals y.
            Greater than zero x is greater than y.
            </returns>
        </member>
        <member name="T:Nuclei.TypeEqualityComparer">
            <summary>
            Defines an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:System.Type"/> objects.
            </summary>
        </member>
        <member name="M:Nuclei.TypeEqualityComparer.Equals(System.Type,System.Type)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>
                <see langword="true"/> if the specified objects are equal; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Nuclei.TypeEqualityComparer.GetHashCode(System.Type)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The System.Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="obj"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Nuclei.TypeExtensions">
            <summary>
            Defines extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:Nuclei.TypeExtensions.IsAssignableToOpenGenericType(System.Type,System.Type)">
            <summary>
            Indicates if the <paramref name="derivedType"/> derives from or implements the given
            <paramref name="baseType"/>.
            </summary>
            <param name="baseType">The base type which may be an open generic type.</param>
            <param name="derivedType">The derived type.</param>
            <returns>
                <see langword="true" /> if the <paramref name="derivedType"/> derives from or implements the
                <paramref name="baseType"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Nuclei.TypeLoader">
            <summary>
            Defines methods for loading a <see cref="T:System.Type"/> from serialized type information.
            </summary>
        </member>
        <member name="M:Nuclei.TypeLoader.FromPartialInformation(System.String,System.String,System.Version,System.Boolean)">
            <summary>
            Tries to load a based on a partially qualified name.
            </summary>
            <param name="typeName">The full name of the type.</param>
            <param name="assemblyName">The assembly name of the assembly that contains the type.</param>
            <param name="assemblyVersion">The version of the assembly that contains the type.</param>
            <param name="throwOnError">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.
            </param>
            <returns>
            The <see cref="T:System.Type"/> or <see langword="null" /> if the type could not be loaded
            and <paramref name="throwOnError"/> was set to <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="typeName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="typeName"/> is an empty string.
            </exception>
            <exception cref="T:Nuclei.UnableToLoadTypeException">
            Thrown when the <see cref="T:System.Type"/> could not be loaded and <paramref name="throwOnError"/> was set to <see langword="true" />.
            </exception>
        </member>
        <member name="M:Nuclei.TypeLoader.FromFullyQualifiedName(System.String,System.Boolean)">
            <summary>
            Tries to load a type based on a fully qualified assembly name.
            </summary>
            <param name="assemblyQualifiedName">The full type name combined with the assembly name.</param>
            <param name="throwOnError">
            <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.
            </param>
            <returns>
            The <see cref="T:System.Type"/> or <see langword="null" /> if the type could not be loaded
            and <paramref name="throwOnError"/> was set to <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="assemblyQualifiedName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="assemblyQualifiedName"/> is an empty string.
            </exception>
            <exception cref="T:Nuclei.UnableToLoadTypeException">
            Thrown when the <see cref="T:System.Type"/> could not be loaded and <paramref name="throwOnError"/> was set to <see langword="true" />.
            </exception>
        </member>
        <member name="T:Nuclei.UnableToLoadTypeException">
            <summary>
            An exception thrown when a type could not be loaded.
            </summary>
        </member>
        <member name="M:Nuclei.UnableToLoadTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.UnableToLoadTypeException"/> class.
            </summary>
        </member>
        <member name="M:Nuclei.UnableToLoadTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.UnableToLoadTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nuclei.UnableToLoadTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.UnableToLoadTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Nuclei.UnableToLoadTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Nuclei.UnableToLoadTypeException"/> class.
            </summary>
            <param name="info">
                The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
                object data about the exception being thrown.
            </param>
            <param name="context">
                The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
                information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
    </members>
</doc>
