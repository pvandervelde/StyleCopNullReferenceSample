<!--
     Copyright 2013 nBuildKit. Licensed under the Apache License, Version 2.0.
-->

<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'
         ToolsVersion="4.0">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsExtensionsExtractIssueIdsFromGitCommitMessages>true</ExistsExtensionsExtractIssueIdsFromGitCommitMessages>

        <!--
            For MsBuild versions 4.0 through to 12.0 the tasks dll was in an assembly that contains the version in the file name.
            However starting with version 14 that is no longer the case so have to differentiate between these cases.
        -->
        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>

        <MsBuildUtilitiesAssembly>$(MSBuildToolsPath)\Microsoft.Build.Utilities.v$(MSBuildToolsVersion).dll</MsBuildUtilitiesAssembly>
        <MsBuildUtilitiesAssembly Condition="!Exists('$(MsBuildUtilitiesAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Utilities.Core.dll</MsBuildUtilitiesAssembly>
    </PropertyGroup>

    <UsingTask TaskName="ExtractIssueIdsFromGitCommitMessages"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MsBuildTasksAssembly)">
        <ParameterGroup>
            <GitExecutablePath ParameterType="System.String" Required="true" />
            <LocalPath ParameterType="System.String" Required="true" />
            <MergeTargetBranch ParameterType="System.String" Required="true" />
            <IssueIds ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Framework.dll"/>
            <Reference Include="$(MsBuildUtilitiesAssembly)"/>
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.Diagnostics;
                    using System.Linq;
                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;

                    public sealed class ExtractIssueIdsFromGitCommitMessages : Microsoft.Build.Utilities.Task
                    {
                        // Grab any number that is preceded by a hash sign
                        private const string IssueIdRegex = @"(?:#)(\d+)";

                        [Microsoft.Build.Framework.Required]
                        public string GitExecutablePath
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string LocalPath
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Required]
                        public string MergeTargetBranch
                        {
                            get;
                            set;
                        }

                        [Microsoft.Build.Framework.Output]
                        public Microsoft.Build.Framework.ITaskItem[] IssueIds
                        {
                            get;
                            set;
                        }

                        public override bool Execute()
                        {
                            // Get the SHA1 values for all the commits that haven't been merged to the target branch yet
                            string[] unmergedCommits = UnmergedCommits();
                            Log.LogMessage(MessageImportance.Low, "Unmerged commits: ");
                            foreach(var commit in unmergedCommits)
                            {
                                Log.LogMessage(MessageImportance.Low, commit);
                            }

                            var list = new System.Collections.Generic.SortedList<string, ITaskItem>();
                            var regex = new System.Text.RegularExpressions.Regex(IssueIdRegex);
                            foreach(var commit in unmergedCommits)
                            {
                                var logMessage = InvokeGitWithArguments(
                                    string.Format(
                                        "log -n 1 --pretty=format:%B {0}",
                                        commit));
                                var issueIdMatch = regex.Match(logMessage);
                                if (issueIdMatch.Success)
                                {
                                    var issueId = issueIdMatch.Groups[1].Value;
                                    Log.LogMessage(MessageImportance.Low, "Issue for commit: [" + commit + "] is: [" + issueId + "]");
                                    if (!list.ContainsKey(issueId))
                                    {
                                        var newItem = new TaskItem(issueId);
                                        list.Add(issueId, newItem);
                                    }
                                }
                            }

                            IssueIds = list.Values.ToArray();

                            // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                            // from a task's constructor or property setter. As long as this task is written to always log an error
                            // when it fails, we can reliably return HasLoggedErrors.
                            return !Log.HasLoggedErrors;
                        }

                        private string InvokeGitWithArguments(string arguments)
                        {
                            var info = new System.Diagnostics.ProcessStartInfo
                                    {
                                        FileName = GitExecutablePath,
                                        Arguments = arguments,
                                        WorkingDirectory = LocalPath,
                                        UseShellExecute = false,
                                        RedirectStandardOutput = true,
                                        RedirectStandardError = true,
                                    };

                            var text = new System.Text.StringBuilder();
                            var process = new System.Diagnostics.Process();
                            process.StartInfo = info;
                            process.OutputDataReceived +=
                                (s, e) =>
                                {
                                    text.Append(e.Data);
                                };
                            process.ErrorDataReceived +=
                                (s, e) =>
                                {
                                    if (!string.IsNullOrWhiteSpace(e.Data))
                                    {
                                        Log.LogWarning(e.Data);
                                    }
                                };
                            process.Start();

                            process.BeginOutputReadLine();
                            process.BeginErrorReadLine();
                            process.WaitForExit();

                            return text.ToString();
                        }

                        private string[] UnmergedCommits()
                        {
                            // Get the SHA1 values for all the commits that haven't been merged to the target branch yet
                            var gitOutput = InvokeGitWithArguments(string.Format("cherry {0}", MergeTargetBranch));
                            return gitOutput.Replace("+ ", System.Environment.NewLine).Split(new string[] { System.Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
                        }
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>